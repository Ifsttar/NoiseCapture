apply plugin: 'com.android.application'

def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootProject.projectDir/.git/"
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim()

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim()
}

android {
    compileSdkVersion 23
    buildToolsVersion latestBuildToolsAvailable("23.0.3")

    defaultConfig {
        applicationId "org.noise_planet.noisecapture"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 8
        versionName "0.3.2 (alpha)"
        // Store build date in apk
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "String", "GITHASH", "\"${getCheckedOutGitCommitHash().toString()}\""
        // Enabling multidex support.
        multiDexEnabled false

        // Gradle Plugin 1.5
        // disable limited support for vector drawables fro Android Studio 1.4
        generatedDensities = []

        // Gradle Plugin 2.0
        // disable limited support for vector drawables fro Android Studio 1.4
        // vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // Gradle Plugin 1.5
    // disable limited support for vector drawables fro Android Studio 1.4
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    lintOptions {
        abortOnError false
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
}

// For using the MPAndroidChart package
// https://github.com/PhilJay/MPAndroidChart
// Apache License, Version 2.0

repositories {
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https//repo.orbisgis.org"
    }
    mavenLocal()
}

dependencies {
    compile 'com.github.PhilJay:MPAndroidChart:v2.2.5'
    compile 'org.slf4j:slf4j-simple:1.7.12'
    // multithreaded FFT for realtime visualisation of spectrum only
    compile 'com.github.wendykierp:JTransforms:3.1'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:support-vector-drawable:23.2.0'
    compile 'com.android.support:animated-vector-drawable:23.2.0'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    //compile 'com.android.support:multidex:1.0.0'
    // Testing-only dependencies
    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile 'com.android.support:support-annotations:23.2.0'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    // unit test on jvm
    testCompile 'org.robolectric:robolectric:3.0'
    compile project(':sosfilter')
}





//
// get the installed SDK and build tools version
// based on: http://www.egeek.me/2013/12/07/gradle-auto-detect-android-sdk-and-build-tools-versions/
// http://stackoverflow.com/questions/34534289/buildtoolsversion-range-or-in-gradle
import org.codehaus.groovy.runtime.StackTraceUtils

int[] sdksAvailable() {
    def sdks = new ByteArrayOutputStream()
    exec {
        commandLine 'android', 'list'
        standardOutput = sdks
    }
    sdks = sdks
    // get the output
            .toString()
    // split to strings
            .split('\n')
    // leave only strings with API levels
            .findAll { it ==~ /\s*API level:.*/ }
    // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
    // sort from highest to lowest
            .sort( { a, b -> b <=> a } )
    sdks
}

int highestSdkAvailable(int defaultSdk) {
    try {
        def sdks = sdksAvailable()
        def highestSdk = sdks[0]
        if (highestSdk != null) {
            println "Using highest found SDK " + highestSdk
            highestSdk
        } else {
            println "No installed SDKs found. Using default SDK " + defaultSdk
            defaultSdk
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                defaultSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultSdk
    }
}

public String androidSDKDir() {
    def sdkDir = android.getSdkDirectory().toString()
    return sdkDir
}

String[] buildToolsAvailable() {
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    buildToolsDir.list().sort { a, b -> b <=> a }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        def latestBuildTools = buildToolsVersions[0]
        if (latestBuildTools != null) {
            println "Using latest found build tools " + latestBuildTools
            latestBuildTools
        } else {
            println "No installed build tools found. Using default build tools " +
                    defaultBuildTools
            defaultBuildTools
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools
    }
}
